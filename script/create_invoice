#!/usr/bin/env ruby

# this tool is for creating invoices from toggl timesheets
# view your weekly report in detailed view and export the csv to TIMESHEET_FOLDER
# then run script/create_invoice

require 'csv'
require 'bigdecimal'

# get our customizable settings

require File.expand_path("../../config/heroku_env.rb", __FILE__)
timesheet_directory = ENV["TIMESHEET_FOLDER"]
invoice_folder = ENV["INVOICE_FOLDER"]
invoice_name = ENV["INVOICE_NAME"]
rate = ENV["HOURLY_INVOICE_RATE"].to_i

# get the file

filepath = Dir.glob("#{timesheet_directory}/*").max_by {|f| File.mtime(f)}

raw_timesheet = CSV.read(filepath)

# get column info

header_row = raw_timesheet[0]

start_date_column_index = header_row.index("Start date")
duration_column_index = header_row.index("Duration")
description_column_index = header_row.index("Description")

# parse entry rows down to day rows

grouped_by_days = raw_timesheet.drop(1).group_by do |row|
  row[start_date_column_index]
end

def string_to_seconds(str)
  split = str.split(":")

  hours = split[0].to_i
  minutes = split[1].to_i
  seconds = split[2].to_i

  (hours * 3600) + (minutes * 60) + seconds
end

def group_by_description(day_rows, description_column_index, duration_column_index)
  day_rows.group_by do |row|
    row[description_column_index]
  end.map do |description, rows|
    {
      description: description,
      seconds: rows.inject(0){ |memo, row| memo + string_to_seconds(row[duration_column_index]) }
    }
  end
end

days = raw_timesheet.drop(1).group_by do |row|
  row[start_date_column_index]
end.map do |start_date, day_rows|
  [
    start_date,
    group_by_description(day_rows, description_column_index, duration_column_index)
  ]
end.to_h

week_total = BigDecimal.new(0)

export_rows = days.inject([]) do |memo, (day, descriptions)|
  day_total = descriptions.inject(BigDecimal.new(0)) do |memo, desc|
    memo + (BigDecimal.new(desc[:seconds]) / 3600).round(2)
  end

  description_rows = descriptions.each_with_index.map do |description, index|
    if index == 0
      [
        day,
        description[:description],
        (BigDecimal.new(description[:seconds]) / 3600).round(2).to_s("F")
      ]
    else
      [
        "",
        description[:description],
        (BigDecimal.new(description[:seconds]) / 3600).round(2).to_s("F")
      ]
    end
  end

  rounded_day_total = BigDecimal.new((day_total * 4).ceil) / 4

  sum_row = [
    "",
    "",
    rounded_day_total.to_s("F"),
    "$#{(rounded_day_total * rate).to_s("F")}"
  ]

  week_total = week_total + rounded_day_total

  memo + description_rows + [ sum_row ]
end

# miscellaneous other info needed for the doc

filename = File.basename(filepath)
start_date = filename.match(/(?<=Toggl_time_entries_).+(?=_to_)/).to_s
end_date = filename.match(/(?<=_to_).+(?=.csv)/).to_s

# write to CSV

filename =
  "#{invoice_name.gsub(" ", "_")}_pw_invoice_s#{start_date.gsub("/", ".")}_e#{end_date.gsub("/", ".")}.csv"
file_path = "#{invoice_folder}/#{filename}"

CSV.open(file_path, "w+") do |csv|
  csv << [ "Pathways Invoice" ]
  csv << [ "Submitted by #{invoice_name}" ]
  csv << [ "" ]
  csv << [ "Start Date: #{start_date}" ]
  csv << [ "End Date: #{end_date}" ]
  csv << [ "" ]

  csv << [ "Date", "Entry Descriptions", "Hours", "Earnings" ]
  export_rows.each do |row|
    csv << row
  end

  csv << [ "Total", "", week_total.to_s("F"), "$#{(week_total * rate).to_s("F")}" ]
end
