<%

group_data = { 
  "1" => "Specialists",
  "2" => "Clinics",
  "3" => "Hospitals",
  "4" => "Areas of Practice",
  "5" => "Specialties", 
  "6" => "Languages" 
}
  
-%>

pathways_group_data = <%=group_data.to_json.html_safe %><%

url_data = { 
  "1" => "specialists",
  "2" => "clinics",
  "3" => "hospitals",
  "4" => "procedures",
  "5" => "specializations", 
  "6" => "languages" 
}
  
-%>

pathways_url_data = <%=url_data.to_json.html_safe %>

<% specialization_data = Hash.new

Specialization.all.each do |specialization|
  next if specialization.in_progress
  specialization_data[specialization.id] = specialization.name

end
  
-%>

pathways_specialization_data = <%=specialization_data.to_json.html_safe %>

<% city_data = Hash.new

City.all.each do |city|
  city_data[city.id] = city.name

end
  
-%>

pathways_city_data = <%=city_data.to_json.html_safe %>

<% search_data = Array.new 

Specialization.all.each do |specialization|

  next if specialization.in_progress
  
  entry = { 
    "n" => specialization.name, 
    'id' => specialization.id,
    "go" => 5 }
  search_data << entry
end 

procedures = Procedure.includes(:procedure_specializations => :specialization)

procedures.each do |procedure|

  #this handles those that only belong to specializations that are "in progress", as well as orphaned entities
  next if procedure.procedure_specializations.reject{ |ps| ps.specialization.in_progress }.length == 0
  
  entry = { 
    "n" => procedure.full_name, 
    "sp" => procedure.procedure_specializations.reject{ |ps| ps.specialization.in_progress }.collect{ |ps| ps.specialization_id },
    "id" => procedure.id,
    "go" => 4 }
  search_data << entry
end 

specialists = Specialist.includes(:specialist_specializations => :specialization, :specialist_offices => { :office => { :location => [{:address => :city}, {:hospital_in => {:location => { :address => :city}}}, {:clinic_in => {:location => [{:address => :city}, {:hospital_in => {:location => { :address => :city}}}]}}]}})

specialists.each do |specialist|

  #this handles those that only belong to specializations that are "in progress", as well as orphaned entities
  next if specialist.specialist_specializations.reject{ |ss| ss.specialization.blank? or ss.specialization.in_progress }.length == 0
  
  entry = { 
    "n" => specialist.name, 
    "sp" => specialist.specialist_specializations.reject{ |ss| ss.specialization.blank? or ss.specialization.in_progress }.collect{ |ss| ss.specialization_id }, 
    "c" => specialist.city_id,
    "st" => specialist.status_class,
    "wt" => specialist.waittime || "",
    "id" => specialist.id,
    "go" => 1 }
  search_data << entry
end

clinics = Clinic.includes(:location => [{:address => :city}, {:hospital_in => {:location => { :address => :city}}}])

clinics.each do |clinic|

  #this handles those that only belong to specializations that are "in progress", as well as orphaned entities
  next if clinic.clinic_specializations.reject{ |cs| cs.specialization.in_progress }.length == 0
  
  entry = { 
    "n" => clinic.name, 
    "sp" => clinic.clinic_specializations.reject{ |cs| cs.specialization.in_progress }.collect{ |cs| cs.specialization_id },
    "c" => clinic.city_id,
    "st" => clinic.status_class,
    "wt" => clinic.waittime,
    "id" => clinic.id,
    "go" => 2 }
  search_data << entry
end

hospitals = Hospital.includes(:location => {:address => :city})

hospitals.each do |hospital|
  entry = { 
    "n" => hospital.name, 
    "c" => hospital.city_id, 
    "id" => hospital.id,
    "go" => 3 }
  search_data << entry
end

Language.all.each do |language|
  entry = { 
    "n" => language.name, 
    "id" => language.id,
    "go" => 6 }
  search_data << entry
end


-%>
pathways_search_data = <%=search_data.to_json.html_safe %>
