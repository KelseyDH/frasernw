<%

order_map = {
  "Specializations" => "1",
  "Specialists" => "2",
  "Clinics" => "3",
  "Procedures" => "4",
  "Hospitals" => "5",
  "Languages" => "6"
}

ScCategory.all.each do |category|
  next if category.sc_items.searchable.empty?
  order_map[ category.name ] = ( order_map.length + 1 ).to_s
end

group_data = { 
  order_map["Specializations"] => "Specialties", 
  order_map["Specialists"] => "Specialists",
  order_map["Clinics"] => "Clinics",
  order_map["Procedures"] => "Areas of Practice",
  order_map["Hospitals"] => "Hospitals",
  order_map["Languages"] => "Languages"
}

ScCategory.all.each do |category|
  next if category.sc_items.searchable.empty?
  group_data[ order_map[category.name] ] = category.name
end

-%>

pathways_group_data = <%=group_data.to_json.html_safe %><%

url_data = { 
  order_map["Specializations"]  => "specialties", 
  order_map["Specialists"]  => "specialists",
  order_map["Clinics"]  => "clinics",
  order_map["Procedures"]  => "areas_of_practice",
  order_map["Hospitals"]  => "hospitals",
  order_map["Languages"]  => "languages" 
}

ScCategory.all.each do |category|
  next if category.sc_items.searchable.empty?
  url_data[ order_map[category.name] ] = "content_items"
end
  
-%>

pathways_url_data = <%=url_data.to_json.html_safe %>

<% specialization_data = Hash.new

Specialization.all.each do |specialization|
  next if specialization.in_progress
  specialization_data[specialization.id] = specialization.name
end
  
-%>

pathways_specialization_data = <%=specialization_data.to_json.html_safe %>

<% city_data = Hash.new

City.all.each do |city|
  city_data[city.id] = city.name

end
  
-%>

pathways_city_data = <%=city_data.to_json.html_safe %>

<% search_data = Array.new 

Specialization.all.each do |specialization|

  next if specialization.in_progress
  
  entry = { 
    "n" => specialization.name, 
    'id' => specialization.id,
    "go" => order_map["Specializations"] }
  search_data << entry
end 

procedures = Procedure.includes(:procedure_specializations => :specialization)

procedures.each do |procedure|

  #this handles those that only belong to specializations that are "in progress", as well as orphaned entities
  next if procedure.procedure_specializations.reject{ |ps| ps.specialization.in_progress }.length == 0
  
  entry = { 
    "n" => procedure.full_name, 
    "sp" => procedure.procedure_specializations.reject{ |ps| ps.specialization.in_progress }.collect{ |ps| ps.specialization_id },
    "id" => procedure.id,
    "go" => order_map["Procedures"] }
  search_data << entry
end 

specialists = Specialist.includes(:specialist_specializations => :specialization, :specialist_offices => { :office => { :location => [{:address => :city}, {:hospital_in => {:location => { :address => :city}}}, {:clinic_in => {:location => [{:address => :city}, {:hospital_in => {:location => { :address => :city}}}]}}]}})

specialists.each do |specialist|

  #this handles those that only belong to specializations that are "in progress", as well as orphaned entities
  next if specialist.specialist_specializations.reject{ |ss| ss.specialization.blank? or ss.specialization.in_progress }.length == 0
  
  entry = { 
    "n" => specialist.name, 
    "sp" => specialist.specialist_specializations.reject{ |ss| ss.specialization.blank? or ss.specialization.in_progress }.collect{ |ss| ss.specialization_id }, 
    "c" => specialist.city_id,
    "st" => specialist.status_class,
    "id" => specialist.id,
    "go" => order_map["Specialists"] }
  search_data << entry
end

clinics = Clinic.includes(:location => [{:address => :city}, {:hospital_in => {:location => { :address => :city}}}])

clinics.each do |clinic|

  #this handles those that only belong to specializations that are "in progress", as well as orphaned entities
  next if clinic.clinic_specializations.reject{ |cs| cs.specialization.in_progress }.length == 0
  
  entry = { 
    "n" => clinic.name, 
    "sp" => clinic.clinic_specializations.reject{ |cs| cs.specialization.in_progress }.collect{ |cs| cs.specialization_id },
    "c" => clinic.city_id,
    "st" => clinic.status_class,
    "id" => clinic.id,
    "go" => order_map["Clinics"] }
  search_data << entry
end

hospitals = Hospital.includes(:location => {:address => :city})

hospitals.each do |hospital|
  entry = { 
    "n" => hospital.name, 
    "c" => hospital.city_id, 
    "id" => hospital.id,
    "go" => order_map["Hospitals"] }
  search_data << entry
end

Language.all.each do |language|
  entry = { 
    "n" => language.name, 
    "id" => language.id,
    "go" => order_map["Languages"] }
  search_data << entry
end

ScCategory.all.each do |category|
  category.sc_items.searchable.each do |item|
    entry = { 
      "n" => item.title, 
      "sp" => item.procedure_specializations.reject{ |ps| ps.specialization.in_progress }.collect{ |ps| ps.specialization_id },
      "id" => item.id,
      "go" => order_map[category.name] }
    search_data << entry
  end
end

-%>
pathways_search_data = <%=search_data.to_json.html_safe %>
