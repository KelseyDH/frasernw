-# multiple controllers use this form
- form_method    = params[:action] == 'new' ? :post   : :put
- current_action = params[:action] == 'new' ? :create : :update
- current_action = params[:action] == 'review' ? :accept : current_action                   #if we are reviewing a review queue edit
- current_action = params[:controller] == 'clinics_editor' ? :update : current_action       #if we are making a review queue edit
- form_action    = current_action
- cancel_path    = params[:controller] == 'specialists_editor' ? root_url : clinics_path

- if @review_item
  %script{"type" => "text/javascript"}
    :plain
      function show_old_value(form_element, old_value_formatted)
      { 
        form_element.closest('div.control-group, div.changed_wrapper').addClass('changed');
        help_span = $(document.createElement('span'));
        help_span.addClass('help-inline');
        help_span.text("Was: " + old_value_formatted);
        form_element.parent().append(help_span);
      } 

      function generate_button_name(form_element_id_array)
      {
        return form_element_id_array[0] + '[' + form_element_id_array.slice(1).join('][') + ']';
      }

      function compare_form(form_element_id_array, new_entry_value)
      {
        //console.log(form_element_id_array + " : " + new_entry_value)
        if ( $.isArray( new_entry_value ) )
        {
          //try as array of checkboxes
          checkbox_selector = "input:checkbox[name='" + generate_button_name(form_element_id_array) + "[]']"
          form_element = $(checkbox_selector);
          
          if (form_element)
          {
            $.each(form_element, function( index, checkbox )
            {
              checkbox = $(checkbox);
              if ( checkbox.prop('checked') && (new_entry_value.indexOf(checkbox.val()) == -1) )
              {
                //was checked, but not in updated list
                checkbox.prop('checked', false); //uncheck
                show_old_value(checkbox, "checked");
              }
              else if ( !checkbox.prop('checked') && (new_entry_value.indexOf(checkbox.val()) != -1) )
              {
                //was unchecked, but now in updated list
                checkbox.prop('checked', true); //check
                show_old_value(checkbox, "unchecked");
              }
            });
          }
          else
          {
            //console.log( "No check boxes for array " + new_entry_value );
          }
          
          return;
        }
        
        //try just as id
        form_element = $('#' + form_element_id_array.join('_'));
        
        if (!form_element || form_element.length != 1)
        {
          //try as radio button
          radio_selector = "input:radio[name='" + generate_button_name(form_element_id_array) + "']:checked"
          form_element = $(radio_selector);
        }
        
        if (!form_element || form_element.length != 1)
        {
          //console.log("Found nothing with id " + form_element_id_array);
          return;
        }
                
        //console.log("tag: " + form_element.prop("tagName"));
        
        switch(form_element.prop("tagName"))
        {
          case('INPUT'):
            //console.log(form_element.attr('type'))
            switch(form_element.attr('type'))
            {
              case('radio'):
                old_entry_value = form_element.val();
                if (old_entry_value != new_entry_value)
                {
                  //console.log("RADIO: old_entry_value = " + old_entry_value + ", new_entry_value = " + new_entry_value);
                  form_element.prop('checked', false);          // uncheck old value
                  new_entry_value_offset = new_entry_value - 1; //eq is zero indexed, our forms are 1
                  $("input:radio[name='" + generate_button_name(form_element_id_array) + "']:eq(" + new_entry_value_offset + ")").prop('checked', true);              //check new value
                  old_value_formatted = form_element.closest('label').text()
                  show_old_value(form_element, old_value_formatted);
                }
                break;
              case('checkbox'):
                if (form_element.prop('checked') && (new_entry_value == "0"))
                {
                  //was checked, uncheck
                  form_element.prop('checked', false);
                  show_old_value(form_element, "checked");
                }
                else if (!form_element.prop('checked') && (new_entry_value == "1"))
                {
                  //was uncheck, check
                  form_element.prop('checked', true);
                  show_old_value(form_element, "unchecked")
                }
                break;
              case('text'):
              case('tel'):
              case('email'):
              case('url'):
                old_entry_value = form_element.val();
                if (old_entry_value != new_entry_value)
                {
                  //console.log("TEXT: old_entry_value = " + old_entry_value + ", new_entry_value = " + new_entry_value);
                  form_element.val(new_entry_value);
                  old_value_formatted = old_entry_value != "" ? old_entry_value : "blank";
                  show_old_value(form_element, old_value_formatted);
                }
                break;
              default:
                //console.log("Don't know how to handle type " + form_element.attr('type'));
                break;
            }
            break;
          case('TEXTAREA'):
            old_entry_value = form_element.val();
            if (old_entry_value != new_entry_value)
            {
              form_element.val(new_entry_value);
              old_value_formatted = old_entry_value != "" ? old_entry_value : "blank";
              show_old_value(form_element, old_value_formatted);
            }
            break;
          case('SELECT'):
            old_entry_value = form_element.val();
            if (old_entry_value != new_entry_value)
            {
              //console.log("SELECT: old_entry_value = " + old_entry_value + ", new_entry_value = " + new_entry_value);
              form_element.val(new_entry_value);
              old_value_formatted = old_entry_value != "" ? $('#' + form_element_id_array.join('_') + ' option[value=\'' + old_entry_value + '\']').text(): "blank";
              show_old_value(form_element, old_value_formatted);
            }
            break;
          default:
            //console.log("Don't know how to handle form tag " + form_element.prop("tagName"));
            break;
        }
      }
      
      function traverse_review_item(id_array, review_item)
      {
        $.each(review_item, function(entry_key, new_entry_value) {
          local_id_array = id_array.slice(0); //array copy
          entry_key = entry_key.replace("(","_").replace(")",""); //fix up ids that look like part1(part2) into part1_part2
          local_id_array.push(entry_key);
          //console.log("traverse: " + local_id_array + " : " + new_entry_value);
          if ( $.isPlainObject(new_entry_value) )
          {
            //recursive
            traverse_review_item(local_id_array, new_entry_value);
          }
          else
          {
            compare_form(local_id_array, new_entry_value);
          }
        });
      }
      
      function traverse_focuses(review_item)
      {
        focuses_mapped = review_item["focuses_mapped"];
        if (!focuses_mapped)
        {
          //handle when no areas of practice are checked off
          focuses_mapped = {}
        }
      
        $("input.capacity").each( function() {
          var $this = $(this);
          if ($this.prop('checked'))
          {
            var checkbox_id = $this.attr('id').substring("focuses_mapped_".length);
            //console.log(checkbox_id);
            if (!focuses_mapped[checkbox_id])
            {
              $this.prop('checked', false);
              show_old_value($this, "checked");
            }
          }
        });
        traverse_review_item(["focuses_mapped"], focuses_mapped);
        traverse_review_item(["focuses_investigations"], review_item["focuses_investigations"]);
      }
      
      $(document).ready(function() 
      {
        var review_item = #{@review_item.object};
        //console.log(review_item);
        traverse_review_item(["clinic"], review_item["clinic"]);
        traverse_focuses(review_item);
      });
      
- if @specialization
  %script{"type" => "text/javascript"}
    :plain
      $(document).ready(function() 
      {
        var specialty_checkbox_id = "#clinic_specializations_including_in_progress_ids_#{@specialization.id}";
        $(specialty_checkbox_id).prop("checked", true);
      });
    
- if @is_review
  .alert.alert-info
    %h3 You are editing #{@clinic.name}'s entry in Pathways.
    %p.space.no_indent If you have any questions while editing, please contact #{@clinic.owner.name} at #{mail_to @clinic.owner.email}
    %p.space.no_indent This database exists to make our practices and your clinic more efficient. By providing the information requested below you are making it easier for family doctors to find your clinic, ensuring that the scope of your clinic is fully understood, and guiding offices in providing you with the correct information when making referrals.
      
= simple_nested_form_for @clinic, :url => {:controller => params[:controller], :action => form_action}, :method => form_method, :html => { :class => "form-horizontal ajax" } do |f|
  - if not f.error_messages.blank?
    .alert.alert-error= f.error_messages

  %h3 General Information 
  = f.input :name
  .no-print
    = f.input :categorization_mask, as: :select, collection: Clinic::CATEGORIZATION_HASH, label_method: :last, value_method: :first, :include_blank => false
  .no-print
    = f.association :specializations_including_in_progress, as: :check_boxes, :hint => "When adding or removing specialities please save and then edit this clinic again to update the list of available areas of practices and specialists."
  
  #section_contact
    
    %hr

    %h3 Clinic Contact Information
    = f.input :phone do
      = f.input_field :phone, :class => "span3"
      .span1
        ext: 
      = f.input_field :phone_extension, :class => "span1"
    = f.input :fax, :input_html => { :class => "span3" }
    = f.input :contact_details
    = f.input :email, :input_html => { :class => "span3" }
    = f.input :url, :input_html => { :class => "span3" }
    
    = f.simple_fields_for :location do |l|
      .control-group.no-print
        %label.control-label Location is
        .controls
          - location_class = "location_0"
          - [['Standalone', !@clinic.location.in_hospital?], ['In a hospital', @clinic.location.in_hospital?]].each do |location| 
            = label_tag "#{location_class}_#{location.first}", "#{radio_button_tag(location_class, location.first, location.second, :class => location_class)} #{location.first}".html_safe
      .hospital_0.no-print
        = l.association :hospital_in, as: :select, collection: Hospital.all, :include_blank => true
      .details_0
        = l.input :suite_in, :input_html => { :class => "span1" }
        = l.input :details_in
      .address_0
        = l.simple_fields_for :address do |a|
          = a.input :suite, :input_html => { :class => "span1" }
          = a.input :address1
          = a.input :address2
          .no-print
            = a.association :city, as: :select, collection: City.all.map { |c| ["#{c.name}, #{c.province.symbol}", c.id] }, :include_blank => true
          = a.input :postalcode, :input_html => { :class => "span1" }
    .universal_0
      = f.input :sector_mask, as: :radio_buttons, collection: Clinic::SECTOR_HASH, label_method: :last, value_method: :first, :include_blank => false
    = f.input :wheelchair_accessible_mask, as: :radio_buttons, collection: Clinic::BOOLEAN_HASH, label_method: :last, value_method: :first
    %script{"type" => "text/javascript"}
      :plain
        $(document).ready( address_0_location_changed );
      
    %hr
      
    %h3 Schedule
    
    = f.simple_fields_for :schedule, :suppress_fields => true do |s|
      - [:monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday].each do |day|
        = s.simple_fields_for day, :suppress_fields => true do |d|
          .changed_wrapper
            = d.input :scheduled, :label => day.to_s.capitalize_first_letter, wrapper: :bootstrap_tight do
              = d.input_field :scheduled, :class => "scheduled span1"
              .hours.no-print
                .changed_wrapper
                  .from from
                  = d.input_field :from, :class => "auto no-print", :minute_step => 15, :include_blank => true
                .changed_wrapper
                  .to to
                  = d.input_field :to, :class => "auto no-print", :minute_step => 15, :include_blank => true
              .print-only
                from:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to:

    %script{"type" => "text/javascript"}
      :plain
        $(".scheduled").each(scheduled_changed)
    
  - if current_user_is_admin? || @is_review
  
    #section_moa.no-print
    
      %hr  
    
      %h3 Senior MOA Contact Information
      .alert.alert-info
        %p.no_indent Please note: the following Senior MOA contact information is never shown on Pathways to users.
        %p.space.no_indent It will only be used for contact by Pathways administrators related to keeping your office's information up-to-date.
      = f.input :contact_name
      = f.input :contact_email
      = f.input :contact_phone
      - if current_user_is_admin?
        = f.input :contact_notes, hint: "Include contact's role (MOA, etc.) and anything else we should know."
  
  #section_status
              
    %hr

    %h3 Status
    = f.input :status_mask, as: :select, collection: Clinic::STATUS_HASH, label_method: :last, value_method: :first
    = f.input :status_details
    = f.input :limitations
    = f.input :location_opened, as: :select, collection: (["Prior to 2010"] + (2010..Time.now.year+1).to_a), prompt: "Select ..."
    = f.association :languages, as: :check_boxes, :item_wrapper_class => 'inline'
    = f.input :interpreter_available

  #section_aop

    %hr

    %h3 Areas of Practice
    = f.input :required_investigations, :hint => "eg. XRs, MRIs, scans, blood work, etc."
    
    %hr{ "style" => "visibility:hidden" }
    
    %h4 Pertinent Areas of Practice/Expertise
    
    .content
      .row
        .span4 Referrals accepted in the following areas of practice.
        .span4 Additional information/investigations required for the specified area of practice.
      
      - @focuses.each do |f|
        .row.spaced
          .span4.changed_wrapper{:class => "pad#{f[:offset]}"}
            %label{"for" => "focuses_mapped_#{f[:id]}"}
              = check_box_tag "focuses_mapped[#{f[:id]}]", 1, f[:mapped], :class => "focus"
              = f[:name]
          .span4.changed_wrapper= text_field_tag "focuses_investigations[#{f[:id]}]", f[:investigations], :class => "span4"
      
    %hr{ "style" => "visibility:hidden" }

    = f.input :not_performed, as: :text
    
  #section_referrals

    %h3 Referral Details
    
    %label How does this clinic accept requests for standard referrals?
    = f.input :referral_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :referral_phone, as: :boolean, wrapper: :bootstrap_tight
    = f.input :referral_other_details
    = f.input :referral_details

    = f.input :referral_form_mask, as: :radio_buttons, collection: Specialist::BOOLEAN_HASH, label_method: :last, value_method: :first, :label => "Does this clinic have a referral form?", :hint => @is_review ? "If you would like to add or correct any referral forms, please email them to #{@clinic.owner.name} at #{mail_to @clinic.owner.email}".html_safe : ""
    
    - if @is_review && @clinic.referral_form_mask == 1 && @clinic.referral_forms.reject{ |referral_form| referral_form.form.blank? }.present?
   
      .control-group
        .controls
          
          %ul
            - @clinic.referral_forms.each do |referral_form|
              - next if not referral_form.form.present?
              - type = referral_form.form_content_type.split('/').last
              %li= link_to "#{referral_form.description} (#{type})", referral_form.form.url, :target => "_blank" 

    = f.input :lagtime_mask, as: :select, collection: Clinic::LAGTIME_HASH, label_method: :last, value_method: :first
    
    = f.input :waittime_mask, as: :select, collection: Clinic::WAITTIME_HASH, label_method: :last, value_method: :first

    %label Our clinic will respond to referral requests:
    = f.input :respond_by_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_by_phone, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_by_mail, as: :boolean, wrapper: :bootstrap_tight
    = f.input :respond_to_patient, as: :boolean
    
    = f.input :patient_can_book_mask, as: :radio_buttons, collection: Clinic::BOOLEAN_HASH, label_method: :last, value_method: :first
    
    = f.input :red_flags, as: :text
    
    %label Optimal method of referral for urgent appointments
    = f.input :urgent_fax, as: :boolean, wrapper: :bootstrap_tight
    = f.input :urgent_phone, as: :boolean, wrapper: :bootstrap_tight
    = f.input :urgent_other_details
    = f.input :urgent_details
    
  #section_for_patients
  
    %hr
    
    %h3 Information for Patients
    
    = f.input :patient_instructions, hint: "e.g. call two days in advance to confirm, bring a list of medications."
    = f.input :cancellation_policy
    
  #section_associations
    
    - if current_user_is_admin? && !@is_review

      %hr
      
      %h3 Associations
      
      %h4 Physicians Who See Patients at the Clinic
      
      .content
        .row
          .span1.no-print Specialist?
          .span2 Name
          .span5 Area of focus (if not the same for all physicians working in the clinic).
          
        = f.simple_fields_for :attendances do |i|
          .row.spaced
            .span1.no-print
              = i.input :is_specialist, label: false, wrapper: :no_wrapper, input_html: { class: "is_specialist span1 no-print" }
            .span2
              = i.association :specialist, as: :select, label: false, collection: @clinic_specialists, prompt: 'Select ...', wrapper: :no_wrapper, input_html: { class: "specialist_list span2 no-print force-print" }
              = i.input :freeform_firstname, label: false, wrapper: :no_wrapper, input_html: { class: "freeform span2", style: "display:none" }
            .span5
              = i.input :area_of_focus, label: false, wrapper: :no_wrapper, input_html: { class: "span5" }
            .spanhalf.no-print
              = i.hidden_field :_destroy
              = i.link_to_remove "<i class='icon-minus-sign'></i>".html_safe, :class => "spanhalf"
              
        .row.no-print
          = f.link_to_add( "<i class='icon-plus-sign'></i>".html_safe + " Add another physician", :attendances, class: "btn offset3")
              
      %script{"type" => "text/javascript"}
        :plain
          $(".is_specialist").each( hideShowPhysicians )
          
    #section_healthcare_providers
      
      %hr{ "style" => "visibility:hidden" }

      = f.association :healthcare_providers, as: :check_boxes
  
  - if current_user_is_admin? && !@is_review
  
    #section_admin.no-print
    
      %hr
      
      %h3 Admin
    
      Users that can edit this clinic
      .content
        = f.simple_fields_for :user_controls_clinics do |i|
          .row.spaced
            .span5.offset3
              = i.association :user, as: :select, :label => false, collection: User.all.reject{ |u| u.admin? }, prompt: 'Select ...', wrapper: :no_wrapper, input_html: { class: "span5" }
            .spanhalf.offsethalf
              = i.hidden_field :_destroy
              = i.link_to_remove "<i class='icon-minus-sign'></i>".html_safe
        .row
          = f.link_to_add( "<i class='icon-plus-sign'></i>".html_safe + " Add another user", :user_controls_clinics, class: "btn offset3")
      
      %hr{ "style" => "visibility:hidden" }
      
      = f.input :admin_notes
      
    -#section_deprecated.no-print
          
      %hr
      
      %h3 Deprecated fields
      %h4
        These are old form fields which may have information in them than now needs to be transferred to fields of the new form. These deprecated fields will not show up on the final site, and are here temporarily to avoid losing previously entered data. As you transfer this information to the other form fields, you might want to delete it from here to avoid confusion.
      = f.input :status
      = f.input :responds_via
      = f.input :interest
      = f.input :referral_criteria

  .form-actions
    = f.button :submit, :class => "btn btn-primary"
    = link_to 'Cancel', cancel_path, :class => "btn btn-danger ajax"

%script{"type" => "text/javascript"}
  :plain
    $(document).ready(function() {
      $("select").not('.no-print').each(function(i){
        var $el = $(this);
        var $options = $el.find("option");
        $el.after("<div class='print-only'><ul id=sel"+i+"></ul></div>");
        var $curPrintBox = $("#sel"+i);
        $options.each(function() {
          var selected = $(this).prop('selected') ? "class='selected'" : "";
          $curPrintBox.append("<li " + selected + ">"+$(this).text()+"</li>");
        });    
      });
    });
    $(document).ready( $("#clinic_categorization_mask").each(clinic_categorization_changed) );
